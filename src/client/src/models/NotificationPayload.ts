/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    INotification,
    INotificationFromJSON,
    INotificationFromJSONTyped,
    INotificationToJSON,
} from './';

/**
 * 
 * @export
 * @interface NotificationPayload
 */
export interface NotificationPayload {
    /**
     * 
     * @type {INotification}
     * @memberof NotificationPayload
     */
    notification?: INotification;
    /**
     * 
     * @type {Array<INotification>}
     * @memberof NotificationPayload
     */
    notifications?: Array<INotification>;
    /**
     * 
     * @type {number}
     * @memberof NotificationPayload
     */
    listLength?: number;
}

export function NotificationPayloadFromJSON(json: any): NotificationPayload {
    return NotificationPayloadFromJSONTyped(json, false);
}

export function NotificationPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationPayload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'notification': !exists(json, 'notification') ? undefined : INotificationFromJSON(json['notification']),
        'notifications': !exists(json, 'notifications') ? undefined : ((json['notifications'] as Array<any>).map(INotificationFromJSON)),
        'listLength': !exists(json, 'listLength') ? undefined : json['listLength'],
    };
}

export function NotificationPayloadToJSON(value?: NotificationPayload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'notification': INotificationToJSON(value.notification),
        'notifications': value.notifications === undefined ? undefined : ((value.notifications as Array<any>).map(INotificationToJSON)),
        'listLength': value.listLength,
    };
}


