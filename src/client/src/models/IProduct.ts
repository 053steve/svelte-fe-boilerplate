/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IModelSizeImg,
    IModelSizeImgFromJSON,
    IModelSizeImgFromJSONTyped,
    IModelSizeImgToJSON,
    IProductImg,
    IProductImgFromJSON,
    IProductImgFromJSONTyped,
    IProductImgToJSON,
    ISizeChartImg,
    ISizeChartImgFromJSON,
    ISizeChartImgFromJSONTyped,
    ISizeChartImgToJSON,
    IStock,
    IStockFromJSON,
    IStockFromJSONTyped,
    IStockToJSON,
    ITaxonomy,
    ITaxonomyFromJSON,
    ITaxonomyFromJSONTyped,
    ITaxonomyToJSON,
    PRODUCTSTATUS,
    PRODUCTSTATUSFromJSON,
    PRODUCTSTATUSFromJSONTyped,
    PRODUCTSTATUSToJSON,
    PRODUCTTYPE,
    PRODUCTTYPEFromJSON,
    PRODUCTTYPEFromJSONTyped,
    PRODUCTTYPEToJSON,
} from './';

/**
 * 
 * @export
 * @interface IProduct
 */
export interface IProduct {
    [key: string]: any | any;
    /**
     * 
     * @type {number}
     * @memberof IProduct
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof IProduct
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof IProduct
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof IProduct
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof IProduct
     */
    sku: string;
    /**
     * 
     * @type {number}
     * @memberof IProduct
     */
    price: number;
    /**
     * 
     * @type {number}
     * @memberof IProduct
     */
    convertPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof IProduct
     */
    convertCurrency?: string;
    /**
     * 
     * @type {PRODUCTTYPE}
     * @memberof IProduct
     */
    productType?: PRODUCTTYPE;
    /**
     * 
     * @type {PRODUCTSTATUS}
     * @memberof IProduct
     */
    productStatus: PRODUCTSTATUS;
    /**
     * 
     * @type {Array<IProductImg>}
     * @memberof IProduct
     */
    productImgs?: Array<IProductImg>;
    /**
     * 
     * @type {string}
     * @memberof IProduct
     */
    details?: string;
    /**
     * 
     * @type {Array<ITaxonomy>}
     * @memberof IProduct
     */
    colors?: Array<ITaxonomy>;
    /**
     * 
     * @type {Array<IProduct>}
     * @memberof IProduct
     */
    relatedColors?: Array<IProduct>;
    /**
     * 
     * @type {Array<ITaxonomy>}
     * @memberof IProduct
     */
    tags?: Array<ITaxonomy>;
    /**
     * 
     * @type {Array<ITaxonomy>}
     * @memberof IProduct
     */
    categories?: Array<ITaxonomy>;
    /**
     * 
     * @type {Array<ITaxonomy>}
     * @memberof IProduct
     */
    collections?: Array<ITaxonomy>;
    /**
     * 
     * @type {Array<ITaxonomy>}
     * @memberof IProduct
     */
    brands?: Array<ITaxonomy>;
    /**
     * 
     * @type {Array<IProduct>}
     * @memberof IProduct
     */
    relatedProducts?: Array<IProduct>;
    /**
     * 
     * @type {Array<IStock>}
     * @memberof IProduct
     */
    stocks: Array<IStock>;
    /**
     * 
     * @type {string}
     * @memberof IProduct
     */
    sizeChartText?: string;
    /**
     * 
     * @type {ISizeChartImg}
     * @memberof IProduct
     */
    sizeChartImg?: ISizeChartImg;
    /**
     * 
     * @type {string}
     * @memberof IProduct
     */
    modelSizeText?: string;
    /**
     * 
     * @type {IModelSizeImg}
     * @memberof IProduct
     */
    modelSizeImg?: IModelSizeImg;
    /**
     * 
     * @type {string}
     * @memberof IProduct
     */
    careInstruction?: string;
    /**
     * 
     * @type {Date}
     * @memberof IProduct
     */
    publishDate?: Date;
}

export function IProductFromJSON(json: any): IProduct {
    return IProductFromJSONTyped(json, false);
}

export function IProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): IProduct {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'id': !exists(json, 'id') ? undefined : json['id'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'title': json['title'],
        'sku': json['sku'],
        'price': json['price'],
        'convertPrice': !exists(json, 'convert_price') ? undefined : json['convert_price'],
        'convertCurrency': !exists(json, 'convert_currency') ? undefined : json['convert_currency'],
        'productType': !exists(json, 'product_type') ? undefined : PRODUCTTYPEFromJSON(json['product_type']),
        'productStatus': PRODUCTSTATUSFromJSON(json['product_status']),
        'productImgs': !exists(json, 'productImgs') ? undefined : ((json['productImgs'] as Array<any>).map(IProductImgFromJSON)),
        'details': !exists(json, 'details') ? undefined : json['details'],
        'colors': !exists(json, 'colors') ? undefined : ((json['colors'] as Array<any>).map(ITaxonomyFromJSON)),
        'relatedColors': !exists(json, 'relatedColors') ? undefined : ((json['relatedColors'] as Array<any>).map(IProductFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(ITaxonomyFromJSON)),
        'categories': !exists(json, 'categories') ? undefined : ((json['categories'] as Array<any>).map(ITaxonomyFromJSON)),
        'collections': !exists(json, 'collections') ? undefined : ((json['collections'] as Array<any>).map(ITaxonomyFromJSON)),
        'brands': !exists(json, 'brands') ? undefined : ((json['brands'] as Array<any>).map(ITaxonomyFromJSON)),
        'relatedProducts': !exists(json, 'relatedProducts') ? undefined : ((json['relatedProducts'] as Array<any>).map(IProductFromJSON)),
        'stocks': ((json['stocks'] as Array<any>).map(IStockFromJSON)),
        'sizeChartText': !exists(json, 'sizeChartText') ? undefined : json['sizeChartText'],
        'sizeChartImg': !exists(json, 'sizeChartImg') ? undefined : ISizeChartImgFromJSON(json['sizeChartImg']),
        'modelSizeText': !exists(json, 'modelSizeText') ? undefined : json['modelSizeText'],
        'modelSizeImg': !exists(json, 'modelSizeImg') ? undefined : IModelSizeImgFromJSON(json['modelSizeImg']),
        'careInstruction': !exists(json, 'careInstruction') ? undefined : json['careInstruction'],
        'publishDate': !exists(json, 'publishDate') ? undefined : (new Date(json['publishDate'])),
    };
}

export function IProductToJSON(value?: IProduct | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'id': value.id,
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'title': value.title,
        'sku': value.sku,
        'price': value.price,
        'convert_price': value.convertPrice,
        'convert_currency': value.convertCurrency,
        'product_type': PRODUCTTYPEToJSON(value.productType),
        'product_status': PRODUCTSTATUSToJSON(value.productStatus),
        'productImgs': value.productImgs === undefined ? undefined : ((value.productImgs as Array<any>).map(IProductImgToJSON)),
        'details': value.details,
        'colors': value.colors === undefined ? undefined : ((value.colors as Array<any>).map(ITaxonomyToJSON)),
        'relatedColors': value.relatedColors === undefined ? undefined : ((value.relatedColors as Array<any>).map(IProductToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(ITaxonomyToJSON)),
        'categories': value.categories === undefined ? undefined : ((value.categories as Array<any>).map(ITaxonomyToJSON)),
        'collections': value.collections === undefined ? undefined : ((value.collections as Array<any>).map(ITaxonomyToJSON)),
        'brands': value.brands === undefined ? undefined : ((value.brands as Array<any>).map(ITaxonomyToJSON)),
        'relatedProducts': value.relatedProducts === undefined ? undefined : ((value.relatedProducts as Array<any>).map(IProductToJSON)),
        'stocks': ((value.stocks as Array<any>).map(IStockToJSON)),
        'sizeChartText': value.sizeChartText,
        'sizeChartImg': ISizeChartImgToJSON(value.sizeChartImg),
        'modelSizeText': value.modelSizeText,
        'modelSizeImg': IModelSizeImgToJSON(value.modelSizeImg),
        'careInstruction': value.careInstruction,
        'publishDate': value.publishDate === undefined ? undefined : (value.publishDate.toISOString()),
    };
}


