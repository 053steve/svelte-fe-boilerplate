/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CurrencyReq,
    CurrencyReqFromJSON,
    CurrencyReqToJSON,
    CurrencyResponse,
    CurrencyResponseFromJSON,
    CurrencyResponseToJSON,
} from '../models';

export interface CreateCurrencyRequest {
    currencyReq: CurrencyReq;
}

export interface DeleteCurrencyRequest {
    currencyId: string;
}

export interface GetAllCurrencysRequest {
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface GetCurrencyRequest {
    currencyId: string;
}

export interface GetCurrencyByNameRequest {
    title: string;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface UpdateCurrencyRequest {
    currencyId: string;
    currencyReq: CurrencyReq;
}

/**
 * 
 */
export class CurrencyApi extends runtime.BaseAPI {

    /**
     */
    async createCurrencyRaw(requestParameters: CreateCurrencyRequest): Promise<runtime.ApiResponse<CurrencyResponse>> {
        if (requestParameters.currencyReq === null || requestParameters.currencyReq === undefined) {
            throw new runtime.RequiredError('currencyReq','Required parameter requestParameters.currencyReq was null or undefined when calling createCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/currency/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyReqToJSON(requestParameters.currencyReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyResponseFromJSON(jsonValue));
    }

    /**
     */
    async createCurrency(requestParameters: CreateCurrencyRequest): Promise<CurrencyResponse> {
        const response = await this.createCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteCurrencyRaw(requestParameters: DeleteCurrencyRequest): Promise<runtime.ApiResponse<CurrencyResponse>> {
        if (requestParameters.currencyId === null || requestParameters.currencyId === undefined) {
            throw new runtime.RequiredError('currencyId','Required parameter requestParameters.currencyId was null or undefined when calling deleteCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/currency/delete/{currencyId}`.replace(`{${"currencyId"}}`, encodeURIComponent(String(requestParameters.currencyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteCurrency(requestParameters: DeleteCurrencyRequest): Promise<CurrencyResponse> {
        const response = await this.deleteCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllCurrencysRaw(requestParameters: GetAllCurrencysRequest): Promise<runtime.ApiResponse<CurrencyResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/currency/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAllCurrencys(requestParameters: GetAllCurrencysRequest): Promise<CurrencyResponse> {
        const response = await this.getAllCurrencysRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getCurrencyRaw(requestParameters: GetCurrencyRequest): Promise<runtime.ApiResponse<CurrencyResponse>> {
        if (requestParameters.currencyId === null || requestParameters.currencyId === undefined) {
            throw new runtime.RequiredError('currencyId','Required parameter requestParameters.currencyId was null or undefined when calling getCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/currency/detail/{currencyId}`.replace(`{${"currencyId"}}`, encodeURIComponent(String(requestParameters.currencyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCurrency(requestParameters: GetCurrencyRequest): Promise<CurrencyResponse> {
        const response = await this.getCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getCurrencyByNameRaw(requestParameters: GetCurrencyByNameRequest): Promise<runtime.ApiResponse<CurrencyResponse>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling getCurrencyByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/currency/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCurrencyByName(requestParameters: GetCurrencyByNameRequest): Promise<CurrencyResponse> {
        const response = await this.getCurrencyByNameRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateCurrencyRaw(requestParameters: UpdateCurrencyRequest): Promise<runtime.ApiResponse<CurrencyResponse>> {
        if (requestParameters.currencyId === null || requestParameters.currencyId === undefined) {
            throw new runtime.RequiredError('currencyId','Required parameter requestParameters.currencyId was null or undefined when calling updateCurrency.');
        }

        if (requestParameters.currencyReq === null || requestParameters.currencyReq === undefined) {
            throw new runtime.RequiredError('currencyReq','Required parameter requestParameters.currencyReq was null or undefined when calling updateCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/currency/update/{currencyId}`.replace(`{${"currencyId"}}`, encodeURIComponent(String(requestParameters.currencyId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyReqToJSON(requestParameters.currencyReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateCurrency(requestParameters: UpdateCurrencyRequest): Promise<CurrencyResponse> {
        const response = await this.updateCurrencyRaw(requestParameters);
        return await response.value();
    }

}
