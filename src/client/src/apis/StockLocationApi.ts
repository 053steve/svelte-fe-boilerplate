/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StockLocationReq,
    StockLocationReqFromJSON,
    StockLocationReqToJSON,
    StockLocationResponse,
    StockLocationResponseFromJSON,
    StockLocationResponseToJSON,
} from '../models';

export interface CreateStockLocationRequest {
    stockLocationReq: StockLocationReq;
}

export interface DeleteStockLocationRequest {
    stockLocationId: string;
}

export interface GetAllStockLocationsRequest {
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface GetStockLocationRequest {
    stockLocationId: string;
}

export interface GetStockLocationByNameRequest {
    title: string;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface UpdateStockLocationRequest {
    stockLocationId: string;
    stockLocationReq: StockLocationReq;
}

/**
 * 
 */
export class StockLocationApi extends runtime.BaseAPI {

    /**
     */
    async createStockLocationRaw(requestParameters: CreateStockLocationRequest): Promise<runtime.ApiResponse<StockLocationResponse>> {
        if (requestParameters.stockLocationReq === null || requestParameters.stockLocationReq === undefined) {
            throw new runtime.RequiredError('stockLocationReq','Required parameter requestParameters.stockLocationReq was null or undefined when calling createStockLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stockLocation/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StockLocationReqToJSON(requestParameters.stockLocationReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockLocationResponseFromJSON(jsonValue));
    }

    /**
     */
    async createStockLocation(requestParameters: CreateStockLocationRequest): Promise<StockLocationResponse> {
        const response = await this.createStockLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteStockLocationRaw(requestParameters: DeleteStockLocationRequest): Promise<runtime.ApiResponse<StockLocationResponse>> {
        if (requestParameters.stockLocationId === null || requestParameters.stockLocationId === undefined) {
            throw new runtime.RequiredError('stockLocationId','Required parameter requestParameters.stockLocationId was null or undefined when calling deleteStockLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stockLocation/delete/{stockLocationId}`.replace(`{${"stockLocationId"}}`, encodeURIComponent(String(requestParameters.stockLocationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockLocationResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteStockLocation(requestParameters: DeleteStockLocationRequest): Promise<StockLocationResponse> {
        const response = await this.deleteStockLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllStockLocationsRaw(requestParameters: GetAllStockLocationsRequest): Promise<runtime.ApiResponse<StockLocationResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stockLocation/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockLocationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAllStockLocations(requestParameters: GetAllStockLocationsRequest): Promise<StockLocationResponse> {
        const response = await this.getAllStockLocationsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getStockLocationRaw(requestParameters: GetStockLocationRequest): Promise<runtime.ApiResponse<StockLocationResponse>> {
        if (requestParameters.stockLocationId === null || requestParameters.stockLocationId === undefined) {
            throw new runtime.RequiredError('stockLocationId','Required parameter requestParameters.stockLocationId was null or undefined when calling getStockLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stockLocation/detail/{stockLocationId}`.replace(`{${"stockLocationId"}}`, encodeURIComponent(String(requestParameters.stockLocationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockLocationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getStockLocation(requestParameters: GetStockLocationRequest): Promise<StockLocationResponse> {
        const response = await this.getStockLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getStockLocationByNameRaw(requestParameters: GetStockLocationByNameRequest): Promise<runtime.ApiResponse<StockLocationResponse>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling getStockLocationByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stockLocation/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockLocationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getStockLocationByName(requestParameters: GetStockLocationByNameRequest): Promise<StockLocationResponse> {
        const response = await this.getStockLocationByNameRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateStockLocationRaw(requestParameters: UpdateStockLocationRequest): Promise<runtime.ApiResponse<StockLocationResponse>> {
        if (requestParameters.stockLocationId === null || requestParameters.stockLocationId === undefined) {
            throw new runtime.RequiredError('stockLocationId','Required parameter requestParameters.stockLocationId was null or undefined when calling updateStockLocation.');
        }

        if (requestParameters.stockLocationReq === null || requestParameters.stockLocationReq === undefined) {
            throw new runtime.RequiredError('stockLocationReq','Required parameter requestParameters.stockLocationReq was null or undefined when calling updateStockLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stockLocation/update/{stockLocationId}`.replace(`{${"stockLocationId"}}`, encodeURIComponent(String(requestParameters.stockLocationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StockLocationReqToJSON(requestParameters.stockLocationReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockLocationResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateStockLocation(requestParameters: UpdateStockLocationRequest): Promise<StockLocationResponse> {
        const response = await this.updateStockLocationRaw(requestParameters);
        return await response.value();
    }

}
