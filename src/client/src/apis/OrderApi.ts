/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CancelOrderReq,
    CancelOrderReqFromJSON,
    CancelOrderReqToJSON,
    ORDERSOURCE,
    ORDERSOURCEFromJSON,
    ORDERSOURCEToJSON,
    OrderResponse,
    OrderResponseFromJSON,
    OrderResponseToJSON,
    OrderReturn,
    OrderReturnFromJSON,
    OrderReturnToJSON,
    RETURNSTATUSREQ,
    RETURNSTATUSREQFromJSON,
    RETURNSTATUSREQToJSON,
    ReturnOptConfirm,
    ReturnOptConfirmFromJSON,
    ReturnOptConfirmToJSON,
    UpdateOrderTracking,
    UpdateOrderTrackingFromJSON,
    UpdateOrderTrackingToJSON,
} from '../models';

export interface CancelOrderRequest {
    invoiceId: string;
    cancelOrderReq: CancelOrderReq;
}

export interface ConfirmOrderRequest {
    invoiceId: string;
}

export interface CreateOrderRequest {
    requestBody: { [key: string]: any; };
}

export interface CreateOrderManualRequest {
    requestBody: { [key: string]: any; };
}

export interface GetCurrentInvoiceIdRequest {
    orderSource: ORDERSOURCE;
}

export interface GetOrderRequest {
    orderId: string;
}

export interface ListOrdersRequest {
    invoiceId?: string;
    productSearchStr?: string;
    custSearchStr?: string;
    returnStatus?: RETURNSTATUSREQ;
    userId?: number;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
    sortBy?: string;
}

export interface ReturnOptConfirmRequest {
    returnOptConfirm: ReturnOptConfirm;
}

export interface ReturnOrderRequest {
    orderReturn: OrderReturn;
}

export interface SimulateOrderRequest {
    requestBody: { [key: string]: any; };
}

export interface SimulateOrderManualRequest {
    requestBody: { [key: string]: any; };
}

export interface UpdateOrderRequest {
    orderId: number;
    requestBody: { [key: string]: any; };
}

export interface UpdateOrderManualRequest {
    orderId: number;
    requestBody: { [key: string]: any; };
}

export interface UpdateOrderTrackingRequest {
    updateOrderTracking: UpdateOrderTracking;
}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI {

    /**
     */
    async cancelOrderRaw(requestParameters: CancelOrderRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling cancelOrder.');
        }

        if (requestParameters.cancelOrderReq === null || requestParameters.cancelOrderReq === undefined) {
            throw new runtime.RequiredError('cancelOrderReq','Required parameter requestParameters.cancelOrderReq was null or undefined when calling cancelOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/cancel/{invoiceId}`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelOrderReqToJSON(requestParameters.cancelOrderReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async cancelOrder(requestParameters: CancelOrderRequest): Promise<OrderResponse> {
        const response = await this.cancelOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async confirmOrderRaw(requestParameters: ConfirmOrderRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling confirmOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order/confirm/{invoiceId}`.replace(`{${"invoiceId"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async confirmOrder(requestParameters: ConfirmOrderRequest): Promise<OrderResponse> {
        const response = await this.confirmOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createOrderRaw(requestParameters: CreateOrderRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling createOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/order/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async createOrder(requestParameters: CreateOrderRequest): Promise<OrderResponse> {
        const response = await this.createOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createOrderManualRaw(requestParameters: CreateOrderManualRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling createOrderManual.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/create/manual`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async createOrderManual(requestParameters: CreateOrderManualRequest): Promise<OrderResponse> {
        const response = await this.createOrderManualRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getCurrentInvoiceIdRaw(requestParameters: GetCurrentInvoiceIdRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderSource === null || requestParameters.orderSource === undefined) {
            throw new runtime.RequiredError('orderSource','Required parameter requestParameters.orderSource was null or undefined when calling getCurrentInvoiceId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/getInvoiceId/{orderSource}`.replace(`{${"orderSource"}}`, encodeURIComponent(String(requestParameters.orderSource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentInvoiceId(requestParameters: GetCurrentInvoiceIdRequest): Promise<OrderResponse> {
        const response = await this.getCurrentInvoiceIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getOrderRaw(requestParameters: GetOrderRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order/detail/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async getOrder(requestParameters: GetOrderRequest): Promise<OrderResponse> {
        const response = await this.getOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listOrdersRaw(requestParameters: ListOrdersRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        const queryParameters: any = {};

        if (requestParameters.invoiceId !== undefined) {
            queryParameters['invoiceId'] = requestParameters.invoiceId;
        }

        if (requestParameters.productSearchStr !== undefined) {
            queryParameters['productSearchStr'] = requestParameters.productSearchStr;
        }

        if (requestParameters.custSearchStr !== undefined) {
            queryParameters['custSearchStr'] = requestParameters.custSearchStr;
        }

        if (requestParameters.returnStatus !== undefined) {
            queryParameters['returnStatus'] = requestParameters.returnStatus;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async listOrders(requestParameters: ListOrdersRequest): Promise<OrderResponse> {
        const response = await this.listOrdersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async returnOptConfirmRaw(requestParameters: ReturnOptConfirmRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.returnOptConfirm === null || requestParameters.returnOptConfirm === undefined) {
            throw new runtime.RequiredError('returnOptConfirm','Required parameter requestParameters.returnOptConfirm was null or undefined when calling returnOptConfirm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/return/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnOptConfirmToJSON(requestParameters.returnOptConfirm),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async returnOptConfirm(requestParameters: ReturnOptConfirmRequest): Promise<OrderResponse> {
        const response = await this.returnOptConfirmRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async returnOrderRaw(requestParameters: ReturnOrderRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderReturn === null || requestParameters.orderReturn === undefined) {
            throw new runtime.RequiredError('orderReturn','Required parameter requestParameters.orderReturn was null or undefined when calling returnOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/return`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderReturnToJSON(requestParameters.orderReturn),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async returnOrder(requestParameters: ReturnOrderRequest): Promise<OrderResponse> {
        const response = await this.returnOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async simulateOrderRaw(requestParameters: SimulateOrderRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling simulateOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/order/simulate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async simulateOrder(requestParameters: SimulateOrderRequest): Promise<OrderResponse> {
        const response = await this.simulateOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async simulateOrderManualRaw(requestParameters: SimulateOrderManualRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling simulateOrderManual.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/order/simulate/manual`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async simulateOrderManual(requestParameters: SimulateOrderManualRequest): Promise<OrderResponse> {
        const response = await this.simulateOrderManualRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateOrderRaw(requestParameters: UpdateOrderRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrder.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/update/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateOrder(requestParameters: UpdateOrderRequest): Promise<OrderResponse> {
        const response = await this.updateOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateOrderManualRaw(requestParameters: UpdateOrderManualRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderManual.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateOrderManual.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/update/{orderId}/manual`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateOrderManual(requestParameters: UpdateOrderManualRequest): Promise<OrderResponse> {
        const response = await this.updateOrderManualRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateOrderTrackingRaw(requestParameters: UpdateOrderTrackingRequest): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.updateOrderTracking === null || requestParameters.updateOrderTracking === undefined) {
            throw new runtime.RequiredError('updateOrderTracking','Required parameter requestParameters.updateOrderTracking was null or undefined when calling updateOrderTracking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/tracking`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrderTrackingToJSON(requestParameters.updateOrderTracking),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateOrderTracking(requestParameters: UpdateOrderTrackingRequest): Promise<OrderResponse> {
        const response = await this.updateOrderTrackingRaw(requestParameters);
        return await response.value();
    }

}
