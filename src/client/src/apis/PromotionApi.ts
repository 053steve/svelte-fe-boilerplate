/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PromoVerify,
    PromoVerifyFromJSON,
    PromoVerifyToJSON,
    PromotionReq,
    PromotionReqFromJSON,
    PromotionReqToJSON,
    PromotionResponse,
    PromotionResponseFromJSON,
    PromotionResponseToJSON,
} from '../models';

export interface CreatePromotionRequest {
    promotionReq: PromotionReq;
}

export interface DeletePromotionRequest {
    promotionId: number;
}

export interface GetAllPromotionsRequest {
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface GetPromotionRequest {
    promotionId: number;
}

export interface GetPromotionByNameRequest {
    title: string;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface UpdatePromotionRequest {
    promotionId: number;
    promotionReq: PromotionReq;
}

export interface VerifyCodeRequest {
    promoVerify: PromoVerify;
}

/**
 * 
 */
export class PromotionApi extends runtime.BaseAPI {

    /**
     */
    async createPromotionRaw(requestParameters: CreatePromotionRequest): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters.promotionReq === null || requestParameters.promotionReq === undefined) {
            throw new runtime.RequiredError('promotionReq','Required parameter requestParameters.promotionReq was null or undefined when calling createPromotion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/promotion/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromotionReqToJSON(requestParameters.promotionReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     */
    async createPromotion(requestParameters: CreatePromotionRequest): Promise<PromotionResponse> {
        const response = await this.createPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deletePromotionRaw(requestParameters: DeletePromotionRequest): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters.promotionId === null || requestParameters.promotionId === undefined) {
            throw new runtime.RequiredError('promotionId','Required parameter requestParameters.promotionId was null or undefined when calling deletePromotion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/promotion/delete/{promotionId}`.replace(`{${"promotionId"}}`, encodeURIComponent(String(requestParameters.promotionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     */
    async deletePromotion(requestParameters: DeletePromotionRequest): Promise<PromotionResponse> {
        const response = await this.deletePromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllPromotionsRaw(requestParameters: GetAllPromotionsRequest): Promise<runtime.ApiResponse<PromotionResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotion/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAllPromotions(requestParameters: GetAllPromotionsRequest): Promise<PromotionResponse> {
        const response = await this.getAllPromotionsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPromotionRaw(requestParameters: GetPromotionRequest): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters.promotionId === null || requestParameters.promotionId === undefined) {
            throw new runtime.RequiredError('promotionId','Required parameter requestParameters.promotionId was null or undefined when calling getPromotion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotion/detail/{promotionId}`.replace(`{${"promotionId"}}`, encodeURIComponent(String(requestParameters.promotionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPromotion(requestParameters: GetPromotionRequest): Promise<PromotionResponse> {
        const response = await this.getPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPromotionByNameRaw(requestParameters: GetPromotionByNameRequest): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling getPromotionByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotion/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPromotionByName(requestParameters: GetPromotionByNameRequest): Promise<PromotionResponse> {
        const response = await this.getPromotionByNameRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updatePromotionRaw(requestParameters: UpdatePromotionRequest): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters.promotionId === null || requestParameters.promotionId === undefined) {
            throw new runtime.RequiredError('promotionId','Required parameter requestParameters.promotionId was null or undefined when calling updatePromotion.');
        }

        if (requestParameters.promotionReq === null || requestParameters.promotionReq === undefined) {
            throw new runtime.RequiredError('promotionReq','Required parameter requestParameters.promotionReq was null or undefined when calling updatePromotion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/promotion/update/{promotionId}`.replace(`{${"promotionId"}}`, encodeURIComponent(String(requestParameters.promotionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PromotionReqToJSON(requestParameters.promotionReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     */
    async updatePromotion(requestParameters: UpdatePromotionRequest): Promise<PromotionResponse> {
        const response = await this.updatePromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async verifyCodeRaw(requestParameters: VerifyCodeRequest): Promise<runtime.ApiResponse<PromotionResponse>> {
        if (requestParameters.promoVerify === null || requestParameters.promoVerify === undefined) {
            throw new runtime.RequiredError('promoVerify','Required parameter requestParameters.promoVerify was null or undefined when calling verifyCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/promotion/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromoVerifyToJSON(requestParameters.promoVerify),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionResponseFromJSON(jsonValue));
    }

    /**
     */
    async verifyCode(requestParameters: VerifyCodeRequest): Promise<PromotionResponse> {
        const response = await this.verifyCodeRaw(requestParameters);
        return await response.value();
    }

}
