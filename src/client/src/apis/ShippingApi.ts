/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ShippingReq,
    ShippingReqFromJSON,
    ShippingReqToJSON,
    ShippingResponse,
    ShippingResponseFromJSON,
    ShippingResponseToJSON,
} from '../models';

export interface CreateShippingRequest {
    shippingReq: ShippingReq;
}

export interface DeleteShippingRequest {
    shippingId: string;
}

export interface GetAllShippingsRequest {
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface GetShippingRequest {
    shippingId: string;
}

export interface GetShippingByNameRequest {
    title: string;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface UpdateShippingRequest {
    shippingId: string;
    shippingReq: ShippingReq;
}

/**
 * 
 */
export class ShippingApi extends runtime.BaseAPI {

    /**
     */
    async createShippingRaw(requestParameters: CreateShippingRequest): Promise<runtime.ApiResponse<ShippingResponse>> {
        if (requestParameters.shippingReq === null || requestParameters.shippingReq === undefined) {
            throw new runtime.RequiredError('shippingReq','Required parameter requestParameters.shippingReq was null or undefined when calling createShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shipping/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingReqToJSON(requestParameters.shippingReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     */
    async createShipping(requestParameters: CreateShippingRequest): Promise<ShippingResponse> {
        const response = await this.createShippingRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteShippingRaw(requestParameters: DeleteShippingRequest): Promise<runtime.ApiResponse<ShippingResponse>> {
        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling deleteShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shipping/delete/{shippingId}`.replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteShipping(requestParameters: DeleteShippingRequest): Promise<ShippingResponse> {
        const response = await this.deleteShippingRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllShippingsRaw(requestParameters: GetAllShippingsRequest): Promise<runtime.ApiResponse<ShippingResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shipping/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAllShippings(requestParameters: GetAllShippingsRequest): Promise<ShippingResponse> {
        const response = await this.getAllShippingsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getCountriesRaw(): Promise<runtime.ApiResponse<ShippingResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shipping/master/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCountries(): Promise<ShippingResponse> {
        const response = await this.getCountriesRaw();
        return await response.value();
    }

    /**
     */
    async getShippingRaw(requestParameters: GetShippingRequest): Promise<runtime.ApiResponse<ShippingResponse>> {
        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling getShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shipping/detail/{shippingId}`.replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     */
    async getShipping(requestParameters: GetShippingRequest): Promise<ShippingResponse> {
        const response = await this.getShippingRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getShippingByNameRaw(requestParameters: GetShippingByNameRequest): Promise<runtime.ApiResponse<ShippingResponse>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling getShippingByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shipping/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     */
    async getShippingByName(requestParameters: GetShippingByNameRequest): Promise<ShippingResponse> {
        const response = await this.getShippingByNameRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateShippingRaw(requestParameters: UpdateShippingRequest): Promise<runtime.ApiResponse<ShippingResponse>> {
        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling updateShipping.');
        }

        if (requestParameters.shippingReq === null || requestParameters.shippingReq === undefined) {
            throw new runtime.RequiredError('shippingReq','Required parameter requestParameters.shippingReq was null or undefined when calling updateShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shipping/update/{shippingId}`.replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingReqToJSON(requestParameters.shippingReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateShipping(requestParameters: UpdateShippingRequest): Promise<ShippingResponse> {
        const response = await this.updateShippingRaw(requestParameters);
        return await response.value();
    }

}
