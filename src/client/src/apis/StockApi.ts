/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StockReq,
    StockReqFromJSON,
    StockReqToJSON,
    StockResponse,
    StockResponseFromJSON,
    StockResponseToJSON,
    StockTxnDTO,
    StockTxnDTOFromJSON,
    StockTxnDTOToJSON,
} from '../models';

export interface DeleteStockRequest {
    stockId: string;
}

export interface GetAllStocksRequest {
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface GetStockRequest {
    stockId: string;
}

export interface StockTransferRequest {
    stockTxnDTO: StockTxnDTO;
}

export interface UpdateStockRequest {
    stockId: string;
    stockReq: StockReq;
}

/**
 * 
 */
export class StockApi extends runtime.BaseAPI {

    /**
     */
    async deleteStockRaw(requestParameters: DeleteStockRequest): Promise<runtime.ApiResponse<StockResponse>> {
        if (requestParameters.stockId === null || requestParameters.stockId === undefined) {
            throw new runtime.RequiredError('stockId','Required parameter requestParameters.stockId was null or undefined when calling deleteStock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stock/delete/{stockId}`.replace(`{${"stockId"}}`, encodeURIComponent(String(requestParameters.stockId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteStock(requestParameters: DeleteStockRequest): Promise<StockResponse> {
        const response = await this.deleteStockRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllStocksRaw(requestParameters: GetAllStocksRequest): Promise<runtime.ApiResponse<StockResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stock/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAllStocks(requestParameters: GetAllStocksRequest): Promise<StockResponse> {
        const response = await this.getAllStocksRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getStockRaw(requestParameters: GetStockRequest): Promise<runtime.ApiResponse<StockResponse>> {
        if (requestParameters.stockId === null || requestParameters.stockId === undefined) {
            throw new runtime.RequiredError('stockId','Required parameter requestParameters.stockId was null or undefined when calling getStock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stock/detail/{stockId}`.replace(`{${"stockId"}}`, encodeURIComponent(String(requestParameters.stockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockResponseFromJSON(jsonValue));
    }

    /**
     */
    async getStock(requestParameters: GetStockRequest): Promise<StockResponse> {
        const response = await this.getStockRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async stockTransferRaw(requestParameters: StockTransferRequest): Promise<runtime.ApiResponse<StockResponse>> {
        if (requestParameters.stockTxnDTO === null || requestParameters.stockTxnDTO === undefined) {
            throw new runtime.RequiredError('stockTxnDTO','Required parameter requestParameters.stockTxnDTO was null or undefined when calling stockTransfer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stock/stock-transfer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StockTxnDTOToJSON(requestParameters.stockTxnDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockResponseFromJSON(jsonValue));
    }

    /**
     */
    async stockTransfer(requestParameters: StockTransferRequest): Promise<StockResponse> {
        const response = await this.stockTransferRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateStockRaw(requestParameters: UpdateStockRequest): Promise<runtime.ApiResponse<StockResponse>> {
        if (requestParameters.stockId === null || requestParameters.stockId === undefined) {
            throw new runtime.RequiredError('stockId','Required parameter requestParameters.stockId was null or undefined when calling updateStock.');
        }

        if (requestParameters.stockReq === null || requestParameters.stockReq === undefined) {
            throw new runtime.RequiredError('stockReq','Required parameter requestParameters.stockReq was null or undefined when calling updateStock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stock/update/{stockId}`.replace(`{${"stockId"}}`, encodeURIComponent(String(requestParameters.stockId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StockReqToJSON(requestParameters.stockReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StockResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateStock(requestParameters: UpdateStockRequest): Promise<StockResponse> {
        const response = await this.updateStockRaw(requestParameters);
        return await response.value();
    }

}
