/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ColorUpdateReq,
    ColorUpdateReqFromJSON,
    ColorUpdateReqToJSON,
    TAXTYPE,
    TAXTYPEFromJSON,
    TAXTYPEToJSON,
    TaxUpdateReq,
    TaxUpdateReqFromJSON,
    TaxUpdateReqToJSON,
    TaxonomyReq,
    TaxonomyReqFromJSON,
    TaxonomyReqToJSON,
    TaxonomyResponse,
    TaxonomyResponseFromJSON,
    TaxonomyResponseToJSON,
} from '../models';

export interface CreateTaxonomyRequest {
    taxonomyReq: TaxonomyReq;
}

export interface DeleteTaxonomyRequest {
    taxonomyId: string;
}

export interface GetAllTaxonomiesRequest {
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface GetTaxonomiesByTaxTypeRequest {
    taxType: TAXTYPE;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface GetTaxonomyRequest {
    taxonomyId: string;
}

export interface GetTaxonomyByNameRequest {
    title: string;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface UpdateColorRequest {
    taxonomyId: string;
    colorUpdateReq: ColorUpdateReq;
}

export interface UpdateTaxonomyRequest {
    taxonomyId: string;
    taxUpdateReq: TaxUpdateReq;
}

/**
 * 
 */
export class TaxonomyApi extends runtime.BaseAPI {

    /**
     */
    async createTaxonomyRaw(requestParameters: CreateTaxonomyRequest): Promise<runtime.ApiResponse<TaxonomyResponse>> {
        if (requestParameters.taxonomyReq === null || requestParameters.taxonomyReq === undefined) {
            throw new runtime.RequiredError('taxonomyReq','Required parameter requestParameters.taxonomyReq was null or undefined when calling createTaxonomy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/taxonomy/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxonomyReqToJSON(requestParameters.taxonomyReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxonomyResponseFromJSON(jsonValue));
    }

    /**
     */
    async createTaxonomy(requestParameters: CreateTaxonomyRequest): Promise<TaxonomyResponse> {
        const response = await this.createTaxonomyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteTaxonomyRaw(requestParameters: DeleteTaxonomyRequest): Promise<runtime.ApiResponse<TaxonomyResponse>> {
        if (requestParameters.taxonomyId === null || requestParameters.taxonomyId === undefined) {
            throw new runtime.RequiredError('taxonomyId','Required parameter requestParameters.taxonomyId was null or undefined when calling deleteTaxonomy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/taxonomy/delete/{taxonomyId}`.replace(`{${"taxonomyId"}}`, encodeURIComponent(String(requestParameters.taxonomyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxonomyResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteTaxonomy(requestParameters: DeleteTaxonomyRequest): Promise<TaxonomyResponse> {
        const response = await this.deleteTaxonomyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllTaxonomiesRaw(requestParameters: GetAllTaxonomiesRequest): Promise<runtime.ApiResponse<TaxonomyResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taxonomy/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxonomyResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAllTaxonomies(requestParameters: GetAllTaxonomiesRequest): Promise<TaxonomyResponse> {
        const response = await this.getAllTaxonomiesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTaxonomiesByTaxTypeRaw(requestParameters: GetTaxonomiesByTaxTypeRequest): Promise<runtime.ApiResponse<TaxonomyResponse>> {
        if (requestParameters.taxType === null || requestParameters.taxType === undefined) {
            throw new runtime.RequiredError('taxType','Required parameter requestParameters.taxType was null or undefined when calling getTaxonomiesByTaxType.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taxonomy/taxtype/list/{taxType}`.replace(`{${"taxType"}}`, encodeURIComponent(String(requestParameters.taxType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxonomyResponseFromJSON(jsonValue));
    }

    /**
     */
    async getTaxonomiesByTaxType(requestParameters: GetTaxonomiesByTaxTypeRequest): Promise<TaxonomyResponse> {
        const response = await this.getTaxonomiesByTaxTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTaxonomyRaw(requestParameters: GetTaxonomyRequest): Promise<runtime.ApiResponse<TaxonomyResponse>> {
        if (requestParameters.taxonomyId === null || requestParameters.taxonomyId === undefined) {
            throw new runtime.RequiredError('taxonomyId','Required parameter requestParameters.taxonomyId was null or undefined when calling getTaxonomy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taxonomy/detail/{taxonomyId}`.replace(`{${"taxonomyId"}}`, encodeURIComponent(String(requestParameters.taxonomyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxonomyResponseFromJSON(jsonValue));
    }

    /**
     */
    async getTaxonomy(requestParameters: GetTaxonomyRequest): Promise<TaxonomyResponse> {
        const response = await this.getTaxonomyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTaxonomyByNameRaw(requestParameters: GetTaxonomyByNameRequest): Promise<runtime.ApiResponse<TaxonomyResponse>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling getTaxonomyByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taxonomy/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxonomyResponseFromJSON(jsonValue));
    }

    /**
     */
    async getTaxonomyByName(requestParameters: GetTaxonomyByNameRequest): Promise<TaxonomyResponse> {
        const response = await this.getTaxonomyByNameRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateColorRaw(requestParameters: UpdateColorRequest): Promise<runtime.ApiResponse<TaxonomyResponse>> {
        if (requestParameters.taxonomyId === null || requestParameters.taxonomyId === undefined) {
            throw new runtime.RequiredError('taxonomyId','Required parameter requestParameters.taxonomyId was null or undefined when calling updateColor.');
        }

        if (requestParameters.colorUpdateReq === null || requestParameters.colorUpdateReq === undefined) {
            throw new runtime.RequiredError('colorUpdateReq','Required parameter requestParameters.colorUpdateReq was null or undefined when calling updateColor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/taxonomy/update/color/{taxonomyId}`.replace(`{${"taxonomyId"}}`, encodeURIComponent(String(requestParameters.taxonomyId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ColorUpdateReqToJSON(requestParameters.colorUpdateReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxonomyResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateColor(requestParameters: UpdateColorRequest): Promise<TaxonomyResponse> {
        const response = await this.updateColorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateTaxonomyRaw(requestParameters: UpdateTaxonomyRequest): Promise<runtime.ApiResponse<TaxonomyResponse>> {
        if (requestParameters.taxonomyId === null || requestParameters.taxonomyId === undefined) {
            throw new runtime.RequiredError('taxonomyId','Required parameter requestParameters.taxonomyId was null or undefined when calling updateTaxonomy.');
        }

        if (requestParameters.taxUpdateReq === null || requestParameters.taxUpdateReq === undefined) {
            throw new runtime.RequiredError('taxUpdateReq','Required parameter requestParameters.taxUpdateReq was null or undefined when calling updateTaxonomy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/taxonomy/update/{taxonomyId}`.replace(`{${"taxonomyId"}}`, encodeURIComponent(String(requestParameters.taxonomyId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TaxUpdateReqToJSON(requestParameters.taxUpdateReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxonomyResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateTaxonomy(requestParameters: UpdateTaxonomyRequest): Promise<TaxonomyResponse> {
        const response = await this.updateTaxonomyRaw(requestParameters);
        return await response.value();
    }

}
