/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NotificationReq,
    NotificationReqFromJSON,
    NotificationReqToJSON,
    NotificationResponse,
    NotificationResponseFromJSON,
    NotificationResponseToJSON,
} from '../models';

export interface CreateNotificationRequest {
    notificationReq: NotificationReq;
}

export interface DeleteNotificationRequest {
    notificationId: string;
}

export interface GetAllNotificationsRequest {
    active?: boolean;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface GetNotificationRequest {
    notificationId: string;
}

export interface GetNotificationByNameRequest {
    message: string;
    active?: boolean;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface UpdateNotificationRequest {
    notificationId: string;
    notificationReq: NotificationReq;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     */
    async createNotificationRaw(requestParameters: CreateNotificationRequest): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters.notificationReq === null || requestParameters.notificationReq === undefined) {
            throw new runtime.RequiredError('notificationReq','Required parameter requestParameters.notificationReq was null or undefined when calling createNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/notification/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationReqToJSON(requestParameters.notificationReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     */
    async createNotification(requestParameters: CreateNotificationRequest): Promise<NotificationResponse> {
        const response = await this.createNotificationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteNotificationRaw(requestParameters: DeleteNotificationRequest): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling deleteNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/notification/delete/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteNotification(requestParameters: DeleteNotificationRequest): Promise<NotificationResponse> {
        const response = await this.deleteNotificationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllNotificationsRaw(requestParameters: GetAllNotificationsRequest): Promise<runtime.ApiResponse<NotificationResponse>> {
        const queryParameters: any = {};

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notification/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAllNotifications(requestParameters: GetAllNotificationsRequest): Promise<NotificationResponse> {
        const response = await this.getAllNotificationsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getNotificationRaw(requestParameters: GetNotificationRequest): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling getNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notification/detail/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getNotification(requestParameters: GetNotificationRequest): Promise<NotificationResponse> {
        const response = await this.getNotificationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getNotificationByNameRaw(requestParameters: GetNotificationByNameRequest): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message','Required parameter requestParameters.message was null or undefined when calling getNotificationByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.message !== undefined) {
            queryParameters['message'] = requestParameters.message;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notification/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getNotificationByName(requestParameters: GetNotificationByNameRequest): Promise<NotificationResponse> {
        const response = await this.getNotificationByNameRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateNotificationRaw(requestParameters: UpdateNotificationRequest): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling updateNotification.');
        }

        if (requestParameters.notificationReq === null || requestParameters.notificationReq === undefined) {
            throw new runtime.RequiredError('notificationReq','Required parameter requestParameters.notificationReq was null or undefined when calling updateNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/notification/update/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationReqToJSON(requestParameters.notificationReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateNotification(requestParameters: UpdateNotificationRequest): Promise<NotificationResponse> {
        const response = await this.updateNotificationRaw(requestParameters);
        return await response.value();
    }

}
