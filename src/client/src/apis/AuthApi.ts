/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthRequest,
    AuthRequestFromJSON,
    AuthRequestToJSON,
    AuthResponses,
    AuthResponsesFromJSON,
    AuthResponsesToJSON,
    ConfirmAccReq,
    ConfirmAccReqFromJSON,
    ConfirmAccReqToJSON,
    ForgotPassReq,
    ForgotPassReqFromJSON,
    ForgotPassReqToJSON,
    ResetPassReq,
    ResetPassReqFromJSON,
    ResetPassReqToJSON,
} from '../models';

export interface AuthOperationRequest {
    authRequest: AuthRequest;
}

export interface ConfirmAccountRequest {
    confirmAccReq: ConfirmAccReq;
}

export interface ForgotPasswordRequest {
    forgotPassReq: ForgotPassReq;
}

export interface ResetPasswordRequest {
    resetPassReq: ResetPassReq;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async authRaw(requestParameters: AuthOperationRequest): Promise<runtime.ApiResponse<AuthResponses>> {
        if (requestParameters.authRequest === null || requestParameters.authRequest === undefined) {
            throw new runtime.RequiredError('authRequest','Required parameter requestParameters.authRequest was null or undefined when calling auth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRequestToJSON(requestParameters.authRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponsesFromJSON(jsonValue));
    }

    /**
     */
    async auth(requestParameters: AuthOperationRequest): Promise<AuthResponses> {
        const response = await this.authRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async confirmAccountRaw(requestParameters: ConfirmAccountRequest): Promise<runtime.ApiResponse<AuthResponses>> {
        if (requestParameters.confirmAccReq === null || requestParameters.confirmAccReq === undefined) {
            throw new runtime.RequiredError('confirmAccReq','Required parameter requestParameters.confirmAccReq was null or undefined when calling confirmAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/confirm-account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmAccReqToJSON(requestParameters.confirmAccReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponsesFromJSON(jsonValue));
    }

    /**
     */
    async confirmAccount(requestParameters: ConfirmAccountRequest): Promise<AuthResponses> {
        const response = await this.confirmAccountRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async forgotPasswordRaw(requestParameters: ForgotPasswordRequest): Promise<runtime.ApiResponse<AuthResponses>> {
        if (requestParameters.forgotPassReq === null || requestParameters.forgotPassReq === undefined) {
            throw new runtime.RequiredError('forgotPassReq','Required parameter requestParameters.forgotPassReq was null or undefined when calling forgotPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/forgot-pass`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotPassReqToJSON(requestParameters.forgotPassReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponsesFromJSON(jsonValue));
    }

    /**
     */
    async forgotPassword(requestParameters: ForgotPasswordRequest): Promise<AuthResponses> {
        const response = await this.forgotPasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest): Promise<runtime.ApiResponse<AuthResponses>> {
        if (requestParameters.resetPassReq === null || requestParameters.resetPassReq === undefined) {
            throw new runtime.RequiredError('resetPassReq','Required parameter requestParameters.resetPassReq was null or undefined when calling resetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/reset-pass`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPassReqToJSON(requestParameters.resetPassReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponsesFromJSON(jsonValue));
    }

    /**
     */
    async resetPassword(requestParameters: ResetPasswordRequest): Promise<AuthResponses> {
        const response = await this.resetPasswordRaw(requestParameters);
        return await response.value();
    }

}
