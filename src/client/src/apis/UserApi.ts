/* tslint:disable */
/* eslint-disable */
/**
 * only-bu-BE
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddressAddReq,
    AddressAddReqFromJSON,
    AddressAddReqToJSON,
    AddressRemoveReq,
    AddressRemoveReqFromJSON,
    AddressRemoveReqToJSON,
    AddressUpdateReq,
    AddressUpdateReqFromJSON,
    AddressUpdateReqToJSON,
    CustomerCreateReq,
    CustomerCreateReqFromJSON,
    CustomerCreateReqToJSON,
    OverridePassReq,
    OverridePassReqFromJSON,
    OverridePassReqToJSON,
    USERTYPE,
    USERTYPEFromJSON,
    USERTYPEToJSON,
    UserCreateReq,
    UserCreateReqFromJSON,
    UserCreateReqToJSON,
    UserResetPassReq,
    UserResetPassReqFromJSON,
    UserResetPassReqToJSON,
    UserResponse,
    UserResponseFromJSON,
    UserResponseToJSON,
    UserUpdateReq,
    UserUpdateReqFromJSON,
    UserUpdateReqToJSON,
} from '../models';

export interface AddAddressRequest {
    addressAddReq: AddressAddReq;
}

export interface CreateCustomerRequest {
    customerCreateReq: CustomerCreateReq;
}

export interface CreateUserRequest {
    userCreateReq: UserCreateReq;
}

export interface DeleteUserRequest {
    userId: string;
}

export interface GetAllUsersRequest {
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface GetUserRequest {
    userId: string;
}

export interface GetUserByUserTypeRequest {
    userType: USERTYPE;
    username?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    active?: boolean;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface OverridePassRequest {
    overridePassReq: OverridePassReq;
}

export interface RemoveAddressRequest {
    addressRemoveReq: AddressRemoveReq;
}

export interface ResetPassReqRequest {
    userResetPassReq: UserResetPassReq;
}

export interface SearchUserRequest {
    username?: string;
    email?: string;
    firstname?: string;
    lastname?: string;
    active?: boolean;
    hasCredit?: boolean;
    pageNumber?: number;
    pageSize?: number;
    filter?: string;
    sortOrder?: string;
}

export interface UpdateAddressRequest {
    addressUpdateReq: AddressUpdateReq;
}

export interface UpdateUserRequest {
    userId: string;
    userUpdateReq: UserUpdateReq;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async addAddressRaw(requestParameters: AddAddressRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.addressAddReq === null || requestParameters.addressAddReq === undefined) {
            throw new runtime.RequiredError('addressAddReq','Required parameter requestParameters.addressAddReq was null or undefined when calling addAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/address/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressAddReqToJSON(requestParameters.addressAddReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async addAddress(requestParameters: AddAddressRequest): Promise<UserResponse> {
        const response = await this.addAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createCustomerRaw(requestParameters: CreateCustomerRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.customerCreateReq === null || requestParameters.customerCreateReq === undefined) {
            throw new runtime.RequiredError('customerCreateReq','Required parameter requestParameters.customerCreateReq was null or undefined when calling createCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/customer/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerCreateReqToJSON(requestParameters.customerCreateReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async createCustomer(requestParameters: CreateCustomerRequest): Promise<UserResponse> {
        const response = await this.createCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.userCreateReq === null || requestParameters.userCreateReq === undefined) {
            throw new runtime.RequiredError('userCreateReq','Required parameter requestParameters.userCreateReq was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateReqToJSON(requestParameters.userCreateReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async createUser(requestParameters: CreateUserRequest): Promise<UserResponse> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/delete/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<UserResponse> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllUsersRaw(requestParameters: GetAllUsersRequest): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAllUsers(requestParameters: GetAllUsersRequest): Promise<UserResponse> {
        const response = await this.getAllUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/detail/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUser(requestParameters: GetUserRequest): Promise<UserResponse> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getUserByUserTypeRaw(requestParameters: GetUserByUserTypeRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.userType === null || requestParameters.userType === undefined) {
            throw new runtime.RequiredError('userType','Required parameter requestParameters.userType was null or undefined when calling getUserByUserType.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/{user_type}`.replace(`{${"user_type"}}`, encodeURIComponent(String(requestParameters.userType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserByUserType(requestParameters: GetUserByUserTypeRequest): Promise<UserResponse> {
        const response = await this.getUserByUserTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async overridePassRaw(requestParameters: OverridePassRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.overridePassReq === null || requestParameters.overridePassReq === undefined) {
            throw new runtime.RequiredError('overridePassReq','Required parameter requestParameters.overridePassReq was null or undefined when calling overridePass.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/override-pass`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OverridePassReqToJSON(requestParameters.overridePassReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async overridePass(requestParameters: OverridePassRequest): Promise<UserResponse> {
        const response = await this.overridePassRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async removeAddressRaw(requestParameters: RemoveAddressRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.addressRemoveReq === null || requestParameters.addressRemoveReq === undefined) {
            throw new runtime.RequiredError('addressRemoveReq','Required parameter requestParameters.addressRemoveReq was null or undefined when calling removeAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/address/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressRemoveReqToJSON(requestParameters.addressRemoveReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async removeAddress(requestParameters: RemoveAddressRequest): Promise<UserResponse> {
        const response = await this.removeAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async resetPassReqRaw(requestParameters: ResetPassReqRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.userResetPassReq === null || requestParameters.userResetPassReq === undefined) {
            throw new runtime.RequiredError('userResetPassReq','Required parameter requestParameters.userResetPassReq was null or undefined when calling resetPassReq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/reset-pass`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserResetPassReqToJSON(requestParameters.userResetPassReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async resetPassReq(requestParameters: ResetPassReqRequest): Promise<UserResponse> {
        const response = await this.resetPassReqRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async searchUserRaw(requestParameters: SearchUserRequest): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.firstname !== undefined) {
            queryParameters['firstname'] = requestParameters.firstname;
        }

        if (requestParameters.lastname !== undefined) {
            queryParameters['lastname'] = requestParameters.lastname;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.hasCredit !== undefined) {
            queryParameters['hasCredit'] = requestParameters.hasCredit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async searchUser(requestParameters: SearchUserRequest): Promise<UserResponse> {
        const response = await this.searchUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateAddressRaw(requestParameters: UpdateAddressRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.addressUpdateReq === null || requestParameters.addressUpdateReq === undefined) {
            throw new runtime.RequiredError('addressUpdateReq','Required parameter requestParameters.addressUpdateReq was null or undefined when calling updateAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/address/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressUpdateReqToJSON(requestParameters.addressUpdateReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateAddress(requestParameters: UpdateAddressRequest): Promise<UserResponse> {
        const response = await this.updateAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUser.');
        }

        if (requestParameters.userUpdateReq === null || requestParameters.userUpdateReq === undefined) {
            throw new runtime.RequiredError('userUpdateReq','Required parameter requestParameters.userUpdateReq was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/update/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateReqToJSON(requestParameters.userUpdateReq),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<UserResponse> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
