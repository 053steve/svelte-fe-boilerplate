/* tslint:disable */
/* eslint-disable */
/**
 * angular-typescript-starter
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthPayload
 */
export interface AuthPayload {
    /**
     * 
     * @type {object}
     * @memberof AuthPayload
     */
    user?: object;
    /**
     * 
     * @type {string}
     * @memberof AuthPayload
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface AuthRequest
 */
export interface AuthRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    password?: string | null;
    /**
     * 
     * @type {AuthType}
     * @memberof AuthRequest
     */
    authType: AuthType;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    signature?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    publicKey?: string | null;
}
/**
 * 
 * @export
 * @interface AuthResponses
 */
export interface AuthResponses {
    /**
     * 
     * @type {boolean}
     * @memberof AuthResponses
     */
    success: boolean;
    /**
     * 
     * @type {AuthPayload}
     * @memberof AuthResponses
     */
    payload?: AuthPayload;
    /**
     * 
     * @type {any}
     * @memberof AuthResponses
     */
    message?: any | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum AuthType {
    STANDARD = 'STANDARD',
    W3WALLET = 'W3_WALLET'
}

/**
 * 
 * @export
 * @interface NonceReq
 */
export interface NonceReq {
    /**
     * 
     * @type {string}
     * @memberof NonceReq
     */
    publicKey: string;
}
/**
 * 
 * @export
 * @interface NullableUSERTYPE
 */
export interface NullableUSERTYPE extends USERTYPE {
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
 */
export interface PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt {
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    firstname: string;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    lastname: string;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    email: string;
    /**
     * 
     * @type {USERTYPE}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    user_type: USERTYPE;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum USERTYPE {
    ADMIN = 'ADMIN',
    STAFF = 'STAFF',
    USER = 'USER'
}

/**
 * 
 * @export
 * @interface UserCreateReq
 */
export interface UserCreateReq {
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    firstname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    lastname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    password: string;
    /**
     * 
     * @type {NullableUSERTYPE}
     * @memberof UserCreateReq
     */
    user_type?: NullableUSERTYPE | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    email: string;
}
/**
 * 
 * @export
 * @interface UserPayload
 */
export interface UserPayload {
    /**
     * 
     * @type {PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt}
     * @memberof UserPayload
     */
    user?: PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt;
    /**
     * 
     * @type {Array<PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt>}
     * @memberof UserPayload
     */
    users?: Array<PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt>;
    /**
     * 
     * @type {number}
     * @memberof UserPayload
     */
    userLength?: number;
    /**
     * 
     * @type {string}
     * @memberof UserPayload
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPayload
     */
    nonce?: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    success: boolean;
    /**
     * 
     * @type {UserPayload}
     * @memberof UserResponse
     */
    payload?: UserPayload;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    message?: any | null;
}
/**
 * 
 * @export
 * @interface UserUpdateReq
 */
export interface UserUpdateReq {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    firstname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    lastname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    password: string;
    /**
     * 
     * @type {NullableUSERTYPE}
     * @memberof UserUpdateReq
     */
    user_type?: NullableUSERTYPE | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    email: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth: async (authRequest: AuthRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRequest' is not null or undefined
            if (authRequest === null || authRequest === undefined) {
                throw new RequiredError('authRequest','Required parameter authRequest was null or undefined when calling auth.');
            }
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authRequest !== undefined ? authRequest : {}) : (authRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auth(authRequest: AuthRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponses>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).auth(authRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth(authRequest: AuthRequest, options?: any): AxiosPromise<AuthResponses> {
            return AuthApiFp(configuration).auth(authRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthRequest} authRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public auth(authRequest: AuthRequest, options?: any) {
        return AuthApiFp(this.configuration).auth(authRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserCreateReq} userCreateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userCreateReq: UserCreateReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateReq' is not null or undefined
            if (userCreateReq === null || userCreateReq === undefined) {
                throw new RequiredError('userCreateReq','Required parameter userCreateReq was null or undefined when calling createUser.');
            }
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userCreateReq !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userCreateReq !== undefined ? userCreateReq : {}) : (userCreateReq || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/user/delete/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NonceReq} nonceReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrCreateNonce: async (nonceReq: NonceReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nonceReq' is not null or undefined
            if (nonceReq === null || nonceReq === undefined) {
                throw new RequiredError('nonceReq','Required parameter nonceReq was null or undefined when calling getOrCreateNonce.');
            }
            const localVarPath = `/user/create/nonce`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof nonceReq !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(nonceReq !== undefined ? nonceReq : {}) : (nonceReq || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUser.');
            }
            const localVarPath = `/user/detail/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {USERTYPE} userType 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserType: async (userType: USERTYPE, username?: string, email?: string, firstName?: string, lastName?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userType' is not null or undefined
            if (userType === null || userType === undefined) {
                throw new RequiredError('userType','Required parameter userType was null or undefined when calling getUserByUserType.');
            }
            const localVarPath = `/user/{user_type}`
                .replace(`{${"user_type"}}`, encodeURIComponent(String(userType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser: async (username?: string, email?: string, firstname?: string, lastname?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateReq} userUpdateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, userUpdateReq: UserUpdateReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUser.');
            }
            // verify required parameter 'userUpdateReq' is not null or undefined
            if (userUpdateReq === null || userUpdateReq === undefined) {
                throw new RequiredError('userUpdateReq','Required parameter userUpdateReq was null or undefined when calling updateUser.');
            }
            const localVarPath = `/user/update/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userUpdateReq !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userUpdateReq !== undefined ? userUpdateReq : {}) : (userUpdateReq || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserCreateReq} userCreateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userCreateReq: UserCreateReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).createUser(userCreateReq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).deleteUser(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getAllUsers(pageNumber, pageSize, filter, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NonceReq} nonceReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrCreateNonce(nonceReq: NonceReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getOrCreateNonce(nonceReq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUser(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {USERTYPE} userType 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUserType(userType: USERTYPE, username?: string, email?: string, firstName?: string, lastName?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUserByUserType(userType, username, email, firstName, lastName, pageNumber, pageSize, filter, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUser(username?: string, email?: string, firstname?: string, lastname?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).searchUser(username, email, firstname, lastname, pageNumber, pageSize, filter, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateReq} userUpdateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, userUpdateReq: UserUpdateReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).updateUser(userId, userUpdateReq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {UserCreateReq} userCreateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userCreateReq: UserCreateReq, options?: any): AxiosPromise<UserResponse> {
            return UserApiFp(configuration).createUser(userCreateReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: any): AxiosPromise<UserResponse> {
            return UserApiFp(configuration).deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any): AxiosPromise<UserResponse> {
            return UserApiFp(configuration).getAllUsers(pageNumber, pageSize, filter, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NonceReq} nonceReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrCreateNonce(nonceReq: NonceReq, options?: any): AxiosPromise<UserResponse> {
            return UserApiFp(configuration).getOrCreateNonce(nonceReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): AxiosPromise<UserResponse> {
            return UserApiFp(configuration).getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {USERTYPE} userType 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserType(userType: USERTYPE, username?: string, email?: string, firstName?: string, lastName?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any): AxiosPromise<UserResponse> {
            return UserApiFp(configuration).getUserByUserType(userType, username, email, firstName, lastName, pageNumber, pageSize, filter, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser(username?: string, email?: string, firstname?: string, lastname?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any): AxiosPromise<UserResponse> {
            return UserApiFp(configuration).searchUser(username, email, firstname, lastname, pageNumber, pageSize, filter, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateReq} userUpdateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, userUpdateReq: UserUpdateReq, options?: any): AxiosPromise<UserResponse> {
            return UserApiFp(configuration).updateUser(userId, userUpdateReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserCreateReq} userCreateReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(userCreateReq: UserCreateReq, options?: any) {
        return UserApiFp(this.configuration).createUser(userCreateReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(userId: string, options?: any) {
        return UserApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAllUsers(pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any) {
        return UserApiFp(this.configuration).getAllUsers(pageNumber, pageSize, filter, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NonceReq} nonceReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOrCreateNonce(nonceReq: NonceReq, options?: any) {
        return UserApiFp(this.configuration).getOrCreateNonce(nonceReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(userId: string, options?: any) {
        return UserApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {USERTYPE} userType 
     * @param {string} [username] 
     * @param {string} [email] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByUserType(userType: USERTYPE, username?: string, email?: string, firstName?: string, lastName?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any) {
        return UserApiFp(this.configuration).getUserByUserType(userType, username, email, firstName, lastName, pageNumber, pageSize, filter, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [username] 
     * @param {string} [email] 
     * @param {string} [firstname] 
     * @param {string} [lastname] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public searchUser(username?: string, email?: string, firstname?: string, lastname?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any) {
        return UserApiFp(this.configuration).searchUser(username, email, firstname, lastname, pageNumber, pageSize, filter, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {UserUpdateReq} userUpdateReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(userId: string, userUpdateReq: UserUpdateReq, options?: any) {
        return UserApiFp(this.configuration).updateUser(userId, userUpdateReq, options).then((request) => request(this.axios, this.basePath));
    }
}


